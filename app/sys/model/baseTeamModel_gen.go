// Code generated by goctl. DO NOT EDIT!

package model

import (
	"context"
	"database/sql"
	"fmt"
	"strings"
	"time"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/cache"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	baseTeamFieldNames          = builder.RawFieldNames(&BaseTeam{})
	baseTeamRows                = strings.Join(baseTeamFieldNames, ",")
	baseTeamRowsExpectAutoSet   = strings.Join(stringx.Remove(baseTeamFieldNames, "`id`", "`create_time`", "`update_at`", "`updated_at`", "`update_time`", "`create_at`", "`created_at`"), ",")
	baseTeamRowsWithPlaceHolder = strings.Join(stringx.Remove(baseTeamFieldNames, "`id`", "`create_time`", "`update_at`", "`updated_at`", "`update_time`", "`create_at`", "`created_at`"), "=?,") + "=?"

	cacheAiopsSysBaseTeamIdPrefix   = "cache:aiopsSys:baseTeam:id:"
	cacheAiopsSysBaseTeamNamePrefix = "cache:aiopsSys:baseTeam:name:"
)

type (
	baseTeamModel interface {
		Insert(ctx context.Context, data *BaseTeam) (sql.Result, error)
		FindOne(ctx context.Context, id int64) (*BaseTeam, error)
		FindOneByName(ctx context.Context, name string) (*BaseTeam, error)
		Update(ctx context.Context, data *BaseTeam) error
		Delete(ctx context.Context, id int64) error
	}

	defaultBaseTeamModel struct {
		sqlc.CachedConn
		table string
	}

	BaseTeam struct {
		Id       int64        `db:"id"`
		CreateBy string       `db:"create_by"`
		CreateAt time.Time    `db:"create_at"`
		UpdateBy string       `db:"update_by"`
		UpdateAt time.Time    `db:"update_at"`
		DeleteAt sql.NullTime `db:"delete_at"`
		Name     string       `db:"name"` // 团队名称
		Info     string       `db:"info"` // 描述信息
	}
)

func newBaseTeamModel(conn sqlx.SqlConn, c cache.CacheConf) *defaultBaseTeamModel {
	return &defaultBaseTeamModel{
		CachedConn: sqlc.NewConn(conn, c),
		table:      "`base_team`",
	}
}

func (m *defaultBaseTeamModel) Delete(ctx context.Context, id int64) error {
	data, err := m.FindOne(ctx, id)
	if err != nil {
		return err
	}

	aiopsSysBaseTeamIdKey := fmt.Sprintf("%s%v", cacheAiopsSysBaseTeamIdPrefix, id)
	aiopsSysBaseTeamNameKey := fmt.Sprintf("%s%v", cacheAiopsSysBaseTeamNamePrefix, data.Name)
	_, err = m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
		return conn.ExecCtx(ctx, query, id)
	}, aiopsSysBaseTeamIdKey, aiopsSysBaseTeamNameKey)
	return err
}

func (m *defaultBaseTeamModel) FindOne(ctx context.Context, id int64) (*BaseTeam, error) {
	aiopsSysBaseTeamIdKey := fmt.Sprintf("%s%v", cacheAiopsSysBaseTeamIdPrefix, id)
	var resp BaseTeam
	err := m.QueryRowCtx(ctx, &resp, aiopsSysBaseTeamIdKey, func(ctx context.Context, conn sqlx.SqlConn, v interface{}) error {
		query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", baseTeamRows, m.table)
		return conn.QueryRowCtx(ctx, v, query, id)
	})
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultBaseTeamModel) FindOneByName(ctx context.Context, name string) (*BaseTeam, error) {
	aiopsSysBaseTeamNameKey := fmt.Sprintf("%s%v", cacheAiopsSysBaseTeamNamePrefix, name)
	var resp BaseTeam
	err := m.QueryRowIndexCtx(ctx, &resp, aiopsSysBaseTeamNameKey, m.formatPrimary, func(ctx context.Context, conn sqlx.SqlConn, v interface{}) (i interface{}, e error) {
		query := fmt.Sprintf("select %s from %s where `name` = ? limit 1", baseTeamRows, m.table)
		if err := conn.QueryRowCtx(ctx, &resp, query, name); err != nil {
			return nil, err
		}
		return resp.Id, nil
	}, m.queryPrimary)
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultBaseTeamModel) Insert(ctx context.Context, data *BaseTeam) (sql.Result, error) {
	aiopsSysBaseTeamIdKey := fmt.Sprintf("%s%v", cacheAiopsSysBaseTeamIdPrefix, data.Id)
	aiopsSysBaseTeamNameKey := fmt.Sprintf("%s%v", cacheAiopsSysBaseTeamNamePrefix, data.Name)
	ret, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?, ?)", m.table, baseTeamRowsExpectAutoSet)
		return conn.ExecCtx(ctx, query, data.CreateBy, data.UpdateBy, data.DeleteAt, data.Name, data.Info)
	}, aiopsSysBaseTeamIdKey, aiopsSysBaseTeamNameKey)
	return ret, err
}

func (m *defaultBaseTeamModel) Update(ctx context.Context, newData *BaseTeam) error {
	data, err := m.FindOne(ctx, newData.Id)
	if err != nil {
		return err
	}

	aiopsSysBaseTeamIdKey := fmt.Sprintf("%s%v", cacheAiopsSysBaseTeamIdPrefix, data.Id)
	aiopsSysBaseTeamNameKey := fmt.Sprintf("%s%v", cacheAiopsSysBaseTeamNamePrefix, data.Name)
	_, err = m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, baseTeamRowsWithPlaceHolder)
		return conn.ExecCtx(ctx, query, newData.CreateBy, newData.UpdateBy, newData.DeleteAt, newData.Name, newData.Info, newData.Id)
	}, aiopsSysBaseTeamIdKey, aiopsSysBaseTeamNameKey)
	return err
}

func (m *defaultBaseTeamModel) formatPrimary(primary interface{}) string {
	return fmt.Sprintf("%s%v", cacheAiopsSysBaseTeamIdPrefix, primary)
}

func (m *defaultBaseTeamModel) queryPrimary(ctx context.Context, conn sqlx.SqlConn, v, primary interface{}) error {
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", baseTeamRows, m.table)
	return conn.QueryRowCtx(ctx, v, query, primary)
}

func (m *defaultBaseTeamModel) tableName() string {
	return m.table
}
